/* The following code was generated by JFlex 1.4.3 on 10/28/11 9:31 AM */



package xtc.lang.cpp;

import xtc.tree.Location;

import xtc.lang.cpp.Syntax.Language;
import xtc.lang.cpp.Syntax.PreprocessorTag;
import xtc.lang.cpp.Syntax.Text;
import xtc.lang.cpp.Syntax.Layout;
import xtc.lang.cpp.Syntax.EOF;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/28/11 9:31 AM from the specification file
 * <tt>c.l.lexer</tt>
 */
class CLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\26\1\31\1\31\1\32\22\0\1\31\1\65\1\30"+
    "\1\76\1\107\1\71\1\66\1\27\1\73\1\74\1\70\1\5\1\75"+
    "\1\61\1\6\1\33\1\2\7\15\2\14\1\104\1\105\1\63\1\64"+
    "\1\62\1\20\1\106\1\17\1\57\1\60\1\17\1\3\1\7\5\1"+
    "\1\11\3\1\1\4\4\1\1\13\2\1\1\16\2\1\1\101\1\25"+
    "\1\102\1\72\1\56\1\0\1\34\1\23\1\42\1\47\1\40\1\22"+
    "\1\51\1\44\1\46\1\1\1\41\1\12\1\50\1\45\1\36\1\55"+
    "\1\1\1\37\1\43\1\35\1\10\1\21\1\53\1\24\1\54\1\52"+
    "\1\77\1\67\1\100\1\103\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\3\1\1\0\1\7\2\0\1\10\1\11\13\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\41\1\43\1\2\1\43\1\44\4\2\2\43\1\45"+
    "\1\46\1\0\2\1\4\5\4\1\1\0\1\7\4\0"+
    "\1\47\1\0\1\50\1\51\16\1\1\52\1\1\1\53"+
    "\6\1\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\43\1\44\1\0\1\44\4\2"+
    "\2\76\1\77\3\1\4\5\3\1\1\100\1\1\1\101"+
    "\2\0\1\1\1\102\21\1\1\103\20\1\1\104\1\105"+
    "\1\0\4\76\2\1\1\106\1\1\1\107\2\1\1\110"+
    "\4\1\1\111\1\1\1\112\1\113\2\1\1\114\11\1"+
    "\1\115\20\1\4\76\1\1\1\116\1\1\1\117\1\120"+
    "\7\1\1\121\2\1\1\122\6\1\1\123\5\1\1\124"+
    "\10\1\1\125\3\1\1\126\1\1\1\127\2\1\1\130"+
    "\1\1\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
    "\22\1\1\140\3\1\1\141\5\1\1\142\4\1\1\143"+
    "\4\1\1\144\1\145\1\146\1\147\1\150\5\1\1\151"+
    "\1\152\4\1\1\153\1\154\1\155\1\156\2\1\1\157"+
    "\4\1\1\160\3\1\1\161\3\1\1\162\1\163\2\1"+
    "\1\164\1\165\4\1\1\166\1\167\2\1\1\170\1\171"+
    "\4\1\1\172\4\1\1\173\1\174\11\1\1\175\2\1"+
    "\1\176\3\1\1\177\11\1\1\200";

  private static int [] zzUnpackAction() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8"+
    "\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8"+
    "\0\u0b40\0\u02d0\0\u02d0\0\u02d0\0\u0b88\0\u02d0\0\u02d0\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u0bd0\0\u02d0"+
    "\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10"+
    "\0\u0e58\0\u0ea0\0\u0ee8\0\u02d0\0\u02d0\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u02d0\0\u13f8"+
    "\0\u02d0\0\u02d0\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8"+
    "\0\220\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0"+
    "\0\u1a28\0\u02d0\0\u02d0\0\u02d0\0\u1a70\0\u02d0\0\u1ab8\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u1b00\0\u1b48\0\u1b90\0\u0c60\0\u0c60"+
    "\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u02d0\0\u1d40\0\u1d88"+
    "\0\u1dd0\0\u0c60\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80"+
    "\0\220\0\u1fc8\0\u02d0\0\u2010\0\u2058\0\u20a0\0\220\0\u20e8"+
    "\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328"+
    "\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568"+
    "\0\220\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0"+
    "\0\u29e8\0\u02d0\0\u02d0\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\220\0\u2c28\0\220\0\u2c70\0\u2cb8\0\220"+
    "\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\220\0\u2e20\0\220\0\220"+
    "\0\u2e68\0\u2eb0\0\220\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018"+
    "\0\u3060\0\u30a8\0\u30f0\0\u3138\0\220\0\u3180\0\u31c8\0\u3210"+
    "\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450"+
    "\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u0c60\0\u3600\0\u3648"+
    "\0\u3690\0\u36d8\0\220\0\u3720\0\220\0\220\0\u3768\0\u37b0"+
    "\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918\0\220\0\u3960\0\u39a8"+
    "\0\220\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\220"+
    "\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98"+
    "\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48\0\220\0\u3f90"+
    "\0\u3fd8\0\u4020\0\220\0\u4068\0\220\0\u40b0\0\u40f8\0\220"+
    "\0\u4140\0\220\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\u4188\0\u41d0\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380"+
    "\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\u45c0"+
    "\0\u4608\0\u4650\0\220\0\u4698\0\u46e0\0\u4728\0\220\0\u4770"+
    "\0\u47b8\0\u4800\0\u4848\0\u4890\0\220\0\u48d8\0\u4920\0\u4968"+
    "\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\220\0\220"+
    "\0\220\0\220\0\220\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80"+
    "\0\220\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8\0\u4e30\0\u4e78"+
    "\0\220\0\220\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\u5028"+
    "\0\u5070\0\220\0\u50b8\0\u5100\0\u5148\0\u5190\0\u51d8\0\u5220"+
    "\0\u5268\0\220\0\u52b0\0\u52f8\0\u5340\0\220\0\220\0\u5388"+
    "\0\u53d0\0\u5418\0\u5460\0\220\0\u54a8\0\u54f0\0\u5538\0\220"+
    "\0\220\0\u5580\0\u55c8\0\u5610\0\u5658\0\220\0\u56a0\0\u56e8"+
    "\0\u5730\0\u5778\0\220\0\220\0\u57c0\0\u5808\0\u5850\0\u5898"+
    "\0\u58e0\0\u5928\0\u5970\0\u59b8\0\u5a00\0\220\0\u5a48\0\u5a90"+
    "\0\220\0\u5ad8\0\u5b20\0\u5b68\0\220\0\u5bb0\0\u5bf8\0\u5c40"+
    "\0\u5c88\0\u5cd0\0\u5d18\0\u5d60\0\u5da8\0\u5df0\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\2\3\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\3\2\12\2\3\1\13\1\14\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\2\23\1\24"+
    "\1\25\1\26\1\3\1\27\1\30\1\3\1\31\1\32"+
    "\2\3\1\33\1\34\1\3\1\35\1\3\1\36\2\3"+
    "\1\37\2\3\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\26\67\1\70\41\67\1\71\17\67\1\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\25\3\30\0\1\72"+
    "\1\73\2\74\1\0\1\75\1\72\1\76\1\77\1\100"+
    "\1\101\1\102\1\73\1\103\1\72\1\0\3\72\1\103"+
    "\7\0\4\72\1\74\14\72\1\74\3\72\34\0\1\104"+
    "\56\0\1\105\25\0\1\75\3\0\1\106\5\0\2\75"+
    "\73\0\4\3\2\0\11\3\1\0\4\3\7\0\11\3"+
    "\1\107\13\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\2\0\1\21\1\22\3\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\2\3\1\110\22\3\30\0"+
    "\1\72\1\12\2\74\1\0\1\75\1\72\1\111\1\112"+
    "\1\113\1\114\2\12\2\72\1\0\4\72\7\0\4\72"+
    "\1\74\14\72\1\74\3\72\140\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\2\3\1\115\22\3\30\0\4\3"+
    "\2\0\3\3\1\116\5\3\1\0\4\3\7\0\2\3"+
    "\1\117\22\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\3\3\1\120\21\3\55\0\1\23\106\0\1\121"+
    "\1\20\2\0\1\122\1\20\1\123\54\0\25\124\1\125"+
    "\2\0\60\124\25\22\1\126\1\0\1\22\1\127\57\22"+
    "\25\0\1\17\1\20\2\0\2\23\1\123\107\0\1\130"+
    "\30\0\1\131\3\0\1\132\20\0\4\3\2\0\1\3"+
    "\1\133\7\3\1\0\4\3\7\0\7\3\1\134\15\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\20\3"+
    "\1\135\4\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\136\20\3\30\0\4\3\2\0\3\3"+
    "\1\137\5\3\1\0\3\3\1\140\7\0\11\3\1\141"+
    "\13\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\142\1\3\1\143\5\3\1\144\14\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\3\1\145\6\3"+
    "\1\146\1\3\1\147\4\3\1\150\5\3\30\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\151\2\3\7\0\11\3"+
    "\1\152\13\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\2\3\1\153\1\3\1\154\20\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\2\3\1\155\22\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\10\3"+
    "\1\156\14\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\157\1\160\1\161\110\0\1\162\1\163"+
    "\1\0\1\164\105\0\1\165\1\0\1\166\106\0\1\167"+
    "\1\170\107\0\1\171\107\0\1\172\107\0\1\173\1\0"+
    "\1\174\105\0\1\175\2\0\1\176\104\0\1\177\107\0"+
    "\1\200\107\0\1\201\121\0\1\202\11\0\26\67\1\0"+
    "\41\67\1\0\17\67\33\0\1\203\55\0\2\72\2\204"+
    "\1\0\12\72\1\0\4\72\7\0\4\72\1\204\14\72"+
    "\1\204\3\72\30\0\1\72\1\73\2\74\1\0\1\75"+
    "\1\72\1\76\1\77\1\100\1\101\1\102\1\73\2\72"+
    "\1\0\4\72\7\0\4\72\1\74\14\72\1\74\3\72"+
    "\30\0\1\72\1\205\2\204\1\206\6\72\2\205\2\72"+
    "\1\0\4\72\7\0\4\72\1\204\14\72\1\204\3\72"+
    "\1\206\27\0\1\72\1\75\2\74\1\0\1\72\1\207"+
    "\1\72\2\207\1\72\2\75\2\72\1\0\1\72\1\207"+
    "\2\72\7\0\4\72\1\74\14\72\1\74\3\72\30\0"+
    "\2\72\2\204\1\0\2\72\1\210\1\211\1\212\5\72"+
    "\1\0\4\72\7\0\4\72\1\204\14\72\1\204\3\72"+
    "\30\0\2\72\2\204\1\0\2\72\1\210\1\213\1\72"+
    "\1\210\4\72\1\0\4\72\7\0\4\72\1\204\14\72"+
    "\1\204\3\72\30\0\2\72\2\204\1\0\2\72\1\210"+
    "\1\72\1\213\1\210\4\72\1\0\4\72\7\0\4\72"+
    "\1\204\14\72\1\204\3\72\30\0\2\72\2\204\1\0"+
    "\3\72\1\211\1\212\1\210\4\72\1\0\4\72\7\0"+
    "\4\72\1\204\14\72\1\204\3\72\30\0\1\72\1\102"+
    "\2\74\1\0\1\75\5\72\2\102\2\72\1\0\4\72"+
    "\7\0\4\72\1\74\14\72\1\74\3\72\30\0\1\72"+
    "\1\214\1\215\1\204\1\0\1\72\1\214\4\72\2\214"+
    "\1\72\1\214\1\0\1\72\2\214\1\72\7\0\1\214"+
    "\3\72\1\215\1\72\1\214\4\72\1\214\5\72\1\204"+
    "\1\72\2\214\35\0\1\216\102\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\7\3\1\217\2\3\1\220\12\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\11\3"+
    "\1\221\13\3\30\0\2\72\2\204\1\0\2\72\1\222"+
    "\1\223\1\224\5\72\1\0\4\72\7\0\4\72\1\204"+
    "\14\72\1\204\3\72\30\0\2\72\2\204\1\0\2\72"+
    "\1\222\1\225\1\72\1\222\4\72\1\0\4\72\7\0"+
    "\4\72\1\204\14\72\1\204\3\72\30\0\2\72\2\204"+
    "\1\0\2\72\1\222\1\72\1\225\1\222\4\72\1\0"+
    "\4\72\7\0\4\72\1\204\14\72\1\204\3\72\30\0"+
    "\2\72\2\204\1\0\3\72\1\223\1\224\1\222\4\72"+
    "\1\0\4\72\7\0\4\72\1\204\14\72\1\204\3\72"+
    "\30\0\4\3\2\0\3\3\1\226\5\3\1\0\4\3"+
    "\7\0\12\3\1\227\12\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\2\3\1\230\22\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\3\3\1\231\21\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\232\20\3\55\0\1\122\106\0\1\121\3\0\2\122"+
    "\110\0\1\130\54\0\25\124\1\125\1\0\1\233\60\124"+
    "\2\0\1\124\12\0\1\124\2\0\4\124\1\234\4\124"+
    "\3\0\2\124\1\0\1\124\5\0\1\124\44\0\1\22"+
    "\12\0\1\22\2\0\4\22\1\235\4\22\3\0\2\22"+
    "\1\0\1\22\5\0\1\22\42\0\26\130\1\20\3\130"+
    "\1\20\55\130\1\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\236\23\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\14\3\1\237\10\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\21\3\1\240\3\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\1\3"+
    "\1\241\5\3\1\242\5\3\1\243\7\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\7\3\1\244\15\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\1\3"+
    "\1\245\23\3\30\0\4\3\2\0\1\3\1\246\7\3"+
    "\1\0\4\3\7\0\25\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\7\3\1\247\15\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\11\3\1\250\13\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\1\251"+
    "\24\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\252\2\3\1\253\21\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\2\3\1\254\22\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\15\3\1\255\1\256"+
    "\6\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\12\3\1\257\12\3\30\0\4\3\2\0\3\3\1\260"+
    "\5\3\1\0\4\3\7\0\1\3\1\261\23\3\30\0"+
    "\4\3\2\0\1\3\1\262\7\3\1\0\4\3\7\0"+
    "\25\3\30\0\4\3\2\0\11\3\1\0\1\3\1\263"+
    "\2\3\7\0\25\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\1\3\1\264\23\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\12\3\1\265\12\3\30\0"+
    "\4\3\2\0\3\3\1\266\5\3\1\0\1\267\1\3"+
    "\1\270\1\3\7\0\1\271\1\272\1\3\1\273\1\274"+
    "\1\3\1\275\1\276\2\3\1\277\12\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\2\3\1\300\22\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\2\3"+
    "\1\301\22\3\113\0\1\302\107\0\1\303\24\0\2\72"+
    "\2\204\1\304\12\72\1\0\4\72\7\0\4\72\1\204"+
    "\14\72\1\204\3\72\1\304\27\0\1\72\1\205\2\204"+
    "\1\0\1\72\1\207\1\72\2\207\1\72\2\205\2\72"+
    "\1\0\1\72\1\207\2\72\7\0\4\72\1\204\14\72"+
    "\1\204\3\72\31\0\1\205\11\0\2\205\73\0\2\72"+
    "\2\204\1\0\3\72\1\210\6\72\1\0\4\72\7\0"+
    "\4\72\1\204\14\72\1\204\3\72\30\0\2\72\2\204"+
    "\1\0\4\72\1\210\5\72\1\0\4\72\7\0\4\72"+
    "\1\204\14\72\1\204\3\72\30\0\2\72\2\204\1\0"+
    "\2\72\1\210\2\72\1\210\4\72\1\0\4\72\7\0"+
    "\4\72\1\204\14\72\1\204\3\72\30\0\1\72\1\214"+
    "\1\215\1\204\1\0\1\72\1\214\1\305\1\306\1\307"+
    "\1\310\2\214\1\72\1\214\1\0\1\72\2\214\1\72"+
    "\7\0\1\214\3\72\1\215\1\72\1\214\4\72\1\214"+
    "\5\72\1\204\1\72\2\214\30\0\1\72\1\214\1\215"+
    "\1\204\1\304\1\72\1\214\1\305\1\306\1\307\1\310"+
    "\2\214\1\72\1\214\1\0\1\72\2\214\1\72\7\0"+
    "\1\214\3\72\1\215\1\72\1\214\4\72\1\214\5\72"+
    "\1\204\1\72\2\214\1\304\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\12\3\1\311\12\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\2\3\1\312\22\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\15\3"+
    "\1\313\7\3\30\0\2\72\2\204\1\0\3\72\1\222"+
    "\6\72\1\0\4\72\7\0\4\72\1\204\14\72\1\204"+
    "\3\72\30\0\2\72\2\204\1\0\4\72\1\222\5\72"+
    "\1\0\4\72\7\0\4\72\1\204\14\72\1\204\3\72"+
    "\30\0\2\72\2\204\1\0\2\72\1\222\2\72\1\222"+
    "\4\72\1\0\4\72\7\0\4\72\1\204\14\72\1\204"+
    "\3\72\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\314\24\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\13\3\1\315\11\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\316\24\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\317\24\3\31\0\2\124"+
    "\3\0\1\124\4\0\2\124\1\0\1\124\2\0\2\124"+
    "\10\0\1\124\3\0\1\124\1\0\1\124\4\0\1\124"+
    "\7\0\2\124\31\0\2\22\3\0\1\22\4\0\2\22"+
    "\1\0\1\22\2\0\2\22\10\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\1\22\7\0\2\22\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\2\3\1\320\22\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\321\20\3\30\0\4\3\2\0\1\3\1\322\7\3"+
    "\1\0\4\3\7\0\25\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\3\1\323\23\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\12\3\1\324\12\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\325\20\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\326\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\14\3\1\327\10\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\4\3\1\330\20\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\1\3"+
    "\1\331\5\3\1\332\15\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\3\3\1\333\21\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\3\1\334\23\3"+
    "\30\0\4\3\2\0\1\3\1\335\7\3\1\0\4\3"+
    "\7\0\25\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\3\3\1\336\21\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\337\13\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\4\3\1\340\20\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\1\3"+
    "\1\341\23\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\12\3\1\342\12\3\30\0\4\3\2\0\11\3"+
    "\1\0\2\3\1\343\1\3\7\0\25\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\344\24\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\2\3\1\345"+
    "\22\3\30\0\4\3\2\0\3\3\1\346\5\3\1\0"+
    "\4\3\7\0\25\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\1\347\24\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\2\3\1\350\22\3\30\0\4\3"+
    "\2\0\1\3\1\351\7\3\1\0\4\3\7\0\25\3"+
    "\30\0\4\3\2\0\3\3\1\352\5\3\1\0\4\3"+
    "\7\0\1\3\1\353\5\3\1\354\15\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\10\3\1\355\7\3"+
    "\1\356\4\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\357\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\3\3\1\360\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\2\3\1\361\22\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\12\3\1\362"+
    "\12\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\11\3\1\363\13\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\364\22\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\14\3\1\365\10\3\31\0"+
    "\1\72\11\0\2\72\73\0\2\72\2\204\1\0\2\72"+
    "\1\366\1\367\1\370\5\72\1\0\4\72\7\0\4\72"+
    "\1\204\14\72\1\204\3\72\30\0\2\72\2\204\1\0"+
    "\2\72\1\366\1\371\1\72\1\366\4\72\1\0\4\72"+
    "\7\0\4\72\1\204\14\72\1\204\3\72\30\0\2\72"+
    "\2\204\1\0\2\72\1\366\1\72\1\371\1\366\4\72"+
    "\1\0\4\72\7\0\4\72\1\204\14\72\1\204\3\72"+
    "\30\0\2\72\2\204\1\0\3\72\1\367\1\370\1\366"+
    "\4\72\1\0\4\72\7\0\4\72\1\204\14\72\1\204"+
    "\3\72\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\15\3\1\372\7\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\11\3\1\373\13\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\374\23\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\375"+
    "\23\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\5\3\1\376\17\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\377\10\3\1\u0100\11\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\3\3\1\u0101"+
    "\21\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\3\3\1\u0102\21\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\7\3\1\u0103\15\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\3\3\1\u0104\21\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\12\3\1\u0105"+
    "\12\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\3\1\u0106\23\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\12\3\1\u0107\12\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\6\3\1\u0108\16\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\u0109"+
    "\23\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\4\3\1\u010a\20\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\2\3\1\u010b\22\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\6\3\1\u010c\16\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\u010d"+
    "\13\3\30\0\4\3\2\0\3\3\1\u010e\5\3\1\0"+
    "\4\3\7\0\25\3\30\0\4\3\2\0\1\3\1\u010f"+
    "\7\3\1\0\4\3\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0110\20\3\30\0"+
    "\4\3\2\0\11\3\1\0\2\3\1\u0111\1\3\7\0"+
    "\25\3\30\0\4\3\2\0\3\3\1\u0112\5\3\1\0"+
    "\4\3\7\0\25\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\12\3\1\u0113\12\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\12\3\1\u0114\12\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\u0115"+
    "\23\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\14\3\1\u0116\10\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\3\3\1\u0117\21\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\21\3\1\u0118\3\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\7\3\1\u0119"+
    "\15\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\3\1\u011a\23\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\11\3\1\u011b\2\3\1\u011c\10\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\15\3\1\u011d"+
    "\7\3\30\0\4\3\2\0\3\3\1\u011e\5\3\1\0"+
    "\4\3\7\0\25\3\30\0\4\3\2\0\3\3\1\u011f"+
    "\5\3\1\0\4\3\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\21\3\1\u0120\3\3\30\0"+
    "\2\72\2\204\1\0\3\72\1\366\6\72\1\0\4\72"+
    "\7\0\4\72\1\204\14\72\1\204\3\72\30\0\2\72"+
    "\2\204\1\0\4\72\1\366\5\72\1\0\4\72\7\0"+
    "\4\72\1\204\14\72\1\204\3\72\30\0\2\72\2\204"+
    "\1\0\2\72\1\366\2\72\1\366\4\72\1\0\4\72"+
    "\7\0\4\72\1\204\14\72\1\204\3\72\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\11\3\1\u0121\13\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\12\3"+
    "\1\u0122\12\3\30\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u0123\2\3\7\0\25\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\4\3\1\u0124\20\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\11\3\1\u0125\13\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\12\3"+
    "\1\u0126\12\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\u0127\23\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\u0128\13\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\11\3\1\u0129\13\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\6\3"+
    "\1\u012a\16\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\u012b\23\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\13\3\1\u012c\11\3\30\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u012d\2\3\7\0\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\10\3"+
    "\1\u012e\14\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\u012f\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\4\3\1\u0130\20\3\30\0\4\3"+
    "\2\0\3\3\1\u0131\5\3\1\0\4\3\7\0\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u0132\20\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\u0133\24\3\30\0\4\3\2\0\3\3\1\u0134"+
    "\5\3\1\0\4\3\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\15\3\1\u0135\7\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\3\3\1\u0136"+
    "\21\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\22\3\1\u0137\2\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\4\3\1\u0138\20\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0139\20\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\u013a"+
    "\23\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\4\3\1\u013b\20\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\7\3\1\u013c\15\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\21\3\1\u013d\3\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\11\3\1\u013e"+
    "\13\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\12\3\1\u013f\12\3\30\0\4\3\2\0\3\3\1\u0140"+
    "\5\3\1\0\4\3\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0141\20\3\30\0"+
    "\4\3\2\0\3\3\1\u0142\5\3\1\0\4\3\7\0"+
    "\25\3\30\0\4\3\2\0\11\3\1\0\1\3\1\u0143"+
    "\2\3\7\0\25\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\6\3\1\u0144\16\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u0145\20\3\30\0"+
    "\4\3\2\0\1\3\1\u0146\7\3\1\0\4\3\7\0"+
    "\25\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\1\3\1\u0147\23\3\30\0\4\3\2\0\3\3\1\u0148"+
    "\5\3\1\0\4\3\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\u0149\23\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\3\1\u014a"+
    "\23\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\11\3\1\u014b\13\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\12\3\1\u014c\12\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u014d\2\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\1\u014e\24\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\2\3"+
    "\1\u014f\22\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\3\3\1\u0150\21\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\u0151\13\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\3\1\u0152\23\3"+
    "\30\0\4\3\2\0\3\3\1\u0153\5\3\1\0\4\3"+
    "\7\0\25\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\u0154\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\u0155\13\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\4\3\1\u0156\20\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\13\3"+
    "\1\u0157\11\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\u0158\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\3\1\u0159\23\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\3\3\1\u015a\21\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u015b\20\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u015c\2\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\12\3\1\u015d\12\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\12\3\1\u015e\12\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\2\3"+
    "\1\u015f\22\3\30\0\4\3\2\0\11\3\1\0\2\3"+
    "\1\u0160\1\3\7\0\25\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\13\3\1\u0161\11\3\30\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u0162\2\3\7\0\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\12\3"+
    "\1\u0163\12\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\7\3\1\u0164\15\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\22\3\1\u0165\2\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\4\3\1\u0166\20\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\13\3"+
    "\1\u0167\11\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\u0168\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\3\3\1\u0169\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u016a\2\3\30\0"+
    "\4\3\2\0\3\3\1\u016b\5\3\1\0\4\3\7\0"+
    "\25\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\11\3\1\u016c\13\3\30\0\4\3\2\0\11\3\1\0"+
    "\1\3\1\u016d\2\3\7\0\25\3\30\0\4\3\2\0"+
    "\1\3\1\u016e\7\3\1\0\4\3\7\0\25\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\22\3\1\u016f"+
    "\2\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\6\3\1\u0170\16\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\12\3\1\u0171\12\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u0172\2\3\30\0"+
    "\4\3\2\0\11\3\1\0\3\3\1\u0173\7\0\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u0174\2\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u0175\2\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\4\3\1\u0176\20\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\22\3\1\u0177\2\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u0178\2\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\3\1\u0179\23\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\22\3\1\u017a\2\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\3\1\u017b\23\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\2\3"+
    "\1\u017c\22\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u017d\2\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\22\3\1\u017e\2\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\22\3\1\u017f\2\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u0180\2\3\30\0\4\3\2\0\11\3\1\0\1\u0181"+
    "\3\3\7\0\1\3\1\u0182\1\u0183\22\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\22\3\1\u0184\2\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\4\3"+
    "\1\u0185\20\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u0186\2\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\11\3\1\u0187\13\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\22\3\1\u0188\2\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\22\3"+
    "\1\u0189\2\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\1\u018a\24\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\20\3\1\u018b\4\3\30\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u018c\2\3\7\0\25\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\22\3\1\u018d"+
    "\2\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\22\3\1\u018e\2\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\22\3\1\u018f\2\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u0190\2\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\21\3\1\u0191"+
    "\3\3\30\0\4\3\2\0\11\3\1\0\1\3\1\u0192"+
    "\2\3\7\0\25\3\30\0\4\3\2\0\11\3\1\0"+
    "\4\3\7\0\22\3\1\u0193\2\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\22\3\1\u0194\2\3\30\0"+
    "\4\3\2\0\3\3\1\u0195\5\3\1\0\4\3\7\0"+
    "\1\u0196\24\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\4\3\1\u0197\20\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\7\3\1\u0198\15\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\12\3\1\u0199\12\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\3\3"+
    "\1\u019a\21\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\7\3\1\u019b\15\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\4\3\1\u019c\20\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\7\3\1\u019d\15\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\15\3"+
    "\1\u019e\7\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\22\3\1\u019f\2\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\3\1\u01a0\23\3\30\0\4\3"+
    "\2\0\11\3\1\0\4\3\7\0\1\3\1\u01a1\23\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\6\3"+
    "\1\u01a2\16\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\2\3\1\u01a3\22\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\2\3\1\u01a4\22\3\30\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u01a5\2\3\7\0\25\3"+
    "\30\0\4\3\2\0\11\3\1\0\4\3\7\0\14\3"+
    "\1\u01a6\10\3\30\0\4\3\2\0\11\3\1\0\4\3"+
    "\7\0\21\3\1\u01a7\3\3\30\0\4\3\2\0\11\3"+
    "\1\0\4\3\7\0\1\u01a8\24\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\1\3\1\u01a9\23\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\12\3\1\u01aa"+
    "\12\3\30\0\4\3\2\0\11\3\1\0\2\3\1\u01ab"+
    "\1\3\7\0\25\3\30\0\4\3\2\0\3\3\1\u01ac"+
    "\5\3\1\0\4\3\7\0\25\3\30\0\4\3\2\0"+
    "\11\3\1\0\4\3\7\0\4\3\1\u01ad\20\3\30\0"+
    "\4\3\2\0\11\3\1\0\4\3\7\0\22\3\1\u01ae"+
    "\2\3\30\0\4\3\2\0\11\3\1\0\4\3\7\0"+
    "\21\3\1\u01af\3\3\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24120];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\10\1\1\11\3\1\1\0\1\1\2\0\27\1"+
    "\3\11\1\1\11\11\1\1\1\11\13\1\2\11\1\0"+
    "\12\1\1\0\1\1\4\0\1\11\1\0\2\11\27\1"+
    "\3\11\1\1\1\11\1\1\14\11\2\1\1\0\7\1"+
    "\1\11\14\1\1\11\2\0\44\1\2\11\1\0\353\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  private StringBuilder comment = null;


  private boolean commentnl = false;


  private String fileName = null;


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Syntax yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 95: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DOUBLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 129: break;
        case 21: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RPAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 130: break;
        case 90: 
          { Language<CTag> syntax = new Language<CTag>(CTag.STRUCT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 131: break;
        case 25: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RBRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 132: break;
        case 2: 
          { Text<CTag> syntax = new Text<CTag>(CTag.OCTALconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 133: break;
        case 64: 
          { Language<CTag> syntax = new Language<CTag>(CTag.FOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 134: break;
        case 41: 
          { yybegin(COMMENT);
comment = new StringBuilder();
comment.append(yytext());
commentnl = false;
          }
        case 135: break;
        case 123: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ATTRIBUTE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 136: break;
        case 52: 
          { Language<CTag> syntax = new Language<CTag>(CTag.NE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 137: break;
        case 9: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DIV); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 138: break;
        case 20: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LPAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 139: break;
        case 24: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LBRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 140: break;
        case 59: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ERassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 141: break;
        case 27: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RBRACK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 142: break;
        case 30: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SEMICOLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 143: break;
        case 18: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MOD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 144: break;
        case 104: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CONTINUE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 145: break;
        case 46: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MINUSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 146: break;
        case 56: 
          { Language<CTag> syntax = new Language<CTag>(CTag.OROR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 147: break;
        case 35: 
          { Text<CTag> syntax = new Text<CTag>(CTag.PPNUM, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 148: break;
        case 66: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ASM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 149: break;
        case 58: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MODassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 150: break;
        case 26: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LBRACK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 151: break;
        case 126: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_VA_LIST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 152: break;
        case 3: 
          { Language<CTag> syntax = new Language<CTag>(CTag.PLUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 153: break;
        case 48: 
          { Language<CTag> syntax = new Language<CTag>(CTag.GE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 154: break;
        case 19: 
          { Language<CTag> syntax = new Language<CTag>(CTag.XOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 155: break;
        case 116: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__SIGNED__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 156: break;
        case 67: 
          { Language<CTag> syntax = new Language<CTag>(CTag.INT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 157: break;
        case 84: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ASM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 158: break;
        case 16: 
          { Language<CTag> syntax = new Language<CTag>(CTag.PIPE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 159: break;
        case 29: 
          { Language<CTag> syntax = new Language<CTag>(CTag.COLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 160: break;
        case 97: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DEFAULT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 161: break;
        case 33: 
          { comment.append(yytext());
          }
        case 162: break;
        case 117: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__INLINE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 163: break;
        case 103: 
          { Language<CTag> syntax = new Language<CTag>(CTag.REGISTER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 164: break;
        case 47: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 165: break;
        case 38: 
          { Language<CTag> syntax = new Language<CTag>(CTag.PLUSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 166: break;
        case 37: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ICR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 167: break;
        case 79: 
          { Language<CTag> syntax = new Language<CTag>(CTag.FLOAT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 168: break;
        case 89: 
          { Language<CTag> syntax = new Language<CTag>(CTag.STATIC); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 169: break;
        case 53: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ANDassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 170: break;
        case 13: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ASSIGN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 171: break;
        case 11: 
          { Language<CTag> syntax = new Language<CTag>(CTag.GT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 172: break;
        case 78: 
          { Language<CTag> syntax = new Language<CTag>(CTag.UNION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 173: break;
        case 85: 
          { Language<CTag> syntax = new Language<CTag>(CTag._BOOL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 174: break;
        case 10: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 175: break;
        case 14: 
          { Language<CTag> syntax = new Language<CTag>(CTag.NOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 176: break;
        case 87: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RETURN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 177: break;
        case 76: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CHAR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 178: break;
        case 61: 
          { comment.append(yytext()); yybegin(YYINITIAL);
return new Layout(comment.toString(), false);
          }
        case 179: break;
        case 122: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__RESTRICT__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 180: break;
        case 23: 
          { Language<CTag> syntax = new Language<CTag>(CTag.HASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 181: break;
        case 62: 
          { Text<CTag> syntax = new Text<CTag>(CTag.HEXconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 182: break;
        case 118: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ALIGNOF__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 183: break;
        case 106: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__TYPEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 184: break;
        case 36: 
          { Text<CTag> syntax = new Text<CTag>(CTag.FLOATINGconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 185: break;
        case 100: 
          { Language<CTag> syntax = new Language<CTag>(CTag.UNSIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 186: break;
        case 6: 
          { Language<CTag> syntax = new Language<CTag>(CTag.QUESTION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 187: break;
        case 96: 
          { Language<CTag> syntax = new Language<CTag>(CTag.TYPEDEF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 188: break;
        case 57: 
          { Language<CTag> syntax = new Language<CTag>(CTag.MULTassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 189: break;
        case 98: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ASM__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 190: break;
        case 1: 
          { Text<CTag> syntax = new Text<CTag>(CTag.IDENTIFIER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 191: break;
        case 43: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 192: break;
        case 39: 
          { Text<CTag> syntax = new Text<CTag>(CTag.STRINGliteral, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 193: break;
        case 94: 
          { Language<CTag> syntax = new Language<CTag>(CTag.INLINE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 194: break;
        case 50: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 195: break;
        case 86: 
          { Language<CTag> syntax = new Language<CTag>(CTag.TYPEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 196: break;
        case 115: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__RESTRICT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 197: break;
        case 45: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ARROW); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 198: break;
        case 128: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_TYPES_COMPATIBLE_P); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 199: break;
        case 114: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__TYPEOF__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 200: break;
        case 109: 
          { Language<CTag> syntax = new Language<CTag>(CTag._COMPLEX); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 201: break;
        case 108: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__INLINE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 202: break;
        case 71: 
          { Language<CTag> syntax = new Language<CTag>(CTag.VOID); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 203: break;
        case 124: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__EXTENSION__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 204: break;
        case 63: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ELLIPSIS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 205: break;
        case 111: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ALIGNOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 206: break;
        case 7: 
          { return new Layout(yytext(), true);
          }
        case 207: break;
        case 32: 
          { Language<CTag> syntax = new Language<CTag>(CTag.USD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 208: break;
        case 49: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 209: break;
        case 80: 
          { Language<CTag> syntax = new Language<CTag>(CTag.BREAK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 210: break;
        case 119: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__ATTRIBUTE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 211: break;
        case 72: 
          { Language<CTag> syntax = new Language<CTag>(CTag.AUTO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 212: break;
        case 8: 
          { return new Layout(yytext(), false);
          }
        case 213: break;
        case 102: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RESTRICT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 214: break;
        case 4: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 215: break;
        case 121: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__VOLATILE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 216: break;
        case 99: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 217: break;
        case 70: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LONG); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 218: break;
        case 12: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 219: break;
        case 112: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__CONST__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 220: break;
        case 110: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__LABEL__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 221: break;
        case 82: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SHORT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 222: break;
        case 77: 
          { Language<CTag> syntax = new Language<CTag>(CTag.GOTO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 223: break;
        case 54: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ANDAND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 224: break;
        case 113: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__VOLATILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 225: break;
        case 81: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 226: break;
        case 40: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DIVassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 227: break;
        case 93: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SWITCH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 228: break;
        case 15: 
          { Language<CTag> syntax = new Language<CTag>(CTag.AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 229: break;
        case 68: 
          { Language<CTag> syntax = new Language<CTag>(CTag.RSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 230: break;
        case 69: 
          { Language<CTag> syntax = new Language<CTag>(CTag.LSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 231: break;
        case 74: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ENUM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 232: break;
        case 75: 
          { Language<CTag> syntax = new Language<CTag>(CTag.CASE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 233: break;
        case 65: 
          { Text<CTag> syntax = new Text<CTag>(CTag.CHARACTERconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 234: break;
        case 42: 
          { Language<CTag> syntax = new Language<CTag>(CTag.IF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 235: break;
        case 28: 
          { Language<CTag> syntax = new Language<CTag>(CTag.NEGATE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 236: break;
        case 88: 
          { Language<CTag> syntax = new Language<CTag>(CTag.EXTERN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 237: break;
        case 22: 
          { Language<CTag> syntax = new Language<CTag>(CTag.COMMA); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 238: break;
        case 83: 
          { Language<CTag> syntax = new Language<CTag>(CTag.WHILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 239: break;
        case 31: 
          { Language<CTag> syntax = new Language<CTag>(CTag.AT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 240: break;
        case 55: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ORassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 241: break;
        case 73: 
          { Language<CTag> syntax = new Language<CTag>(CTag.ELSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 242: break;
        case 101: 
          { Language<CTag> syntax = new Language<CTag>(CTag.VOLATILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 243: break;
        case 92: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SIZEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 244: break;
        case 91: 
          { Language<CTag> syntax = new Language<CTag>(CTag.SIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 245: break;
        case 60: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DHASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 246: break;
        case 51: 
          { Language<CTag> syntax = new Language<CTag>(CTag.EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 247: break;
        case 107: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__SIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 248: break;
        case 5: 
          { Text<CTag> syntax = new Text<CTag>(CTag.INTEGERconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 249: break;
        case 105: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__THREAD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 250: break;
        case 44: 
          { Language<CTag> syntax = new Language<CTag>(CTag.DECR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 251: break;
        case 120: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__COMPLEX__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 252: break;
        case 34: 
          { comment.append(yytext()); commentnl = true;
          }
        case 253: break;
        case 127: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_OFFSETOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 254: break;
        case 17: 
          { Language<CTag> syntax = new Language<CTag>(CTag.STAR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 255: break;
        case 125: 
          { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_VA_ARG); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 256: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   EOF syntax = new EOF();

  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
